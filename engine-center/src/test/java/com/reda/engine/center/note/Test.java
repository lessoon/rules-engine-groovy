package com.reda.engine.center.note;

/**
 * 功能概述：
 *
 * @author Lidu
 * @version 1.0
 * <p>Date: 2020-06-17 15-48
 * <p>Copyright: Copyright(c)2020 RedaFlight.com All Rights Reserved
 * @since JDK 1.7
 */
public class Test {
    public static void main(String[] args) {
        String rule_01 = "import com.company.project.core.SpringContextUtils;\nimport com.company.project.model.FlightInfo;\nimport com.company.project.service.FlightInfoService\n\nimport java.text.DateFormat\nimport java.text.SimpleDateFormat;\nimport java.util.concurrent.atomic.AtomicReference\n\nimport static com.company.project.utlis.DataUtils.calcToMinute;\n\nclass Rule_01 {\n\n    private static FlightInfoService flightInfoService;\n\n    static {\n        flightInfoService = SpringContextUtils.getBean(FlightInfoService.class);\n    }\n\n    public List<Map<String, Object>> findFatiguePliot() {\n        DateFormat df = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        Map<Date, List<FlightInfo>> map = new HashMap<>();\n        List<FlightInfo> list = flightInfoService.findAll();\n        list.forEach({ flightInfo ->\n            Date flightDate = flightInfo.getFlightDate();\n            List<FlightInfo> list2 = map.get(flightDate);\n            if (list2 != null) {\n                list2.add(flightInfo);\n            } else {\n                list2 = new ArrayList<>();\n                list2.add(flightInfo);\n                map.put(flightDate, list2);\n            }\n        });\n\n        List<Map<String, Object>> resuleList = new ArrayList<>();\n        map.entrySet().forEach({ dateListEntry ->\n            Map<String, Object> result = new HashMap<>();\n            Date flightDate = dateListEntry.getKey();\n            List<FlightInfo> list2 = dateListEntry.getValue();\n            String Check_in_time_str = null;\n            AtomicReference<Long> today_work_time = new AtomicReference<>(0L);\n            list2.forEach({ flightInfo ->\n                Date checkTime = flightInfo.getCheckTime();\n                if (Check_in_time_str == null || checkTime.compareTo(df.parse(Check_in_time_str)) < 0) {\n                    Check_in_time_str = df.format(checkTime);\n                }\n                Long aLong = calcToMinute(flightInfo.getBlockTime(), flightInfo.getRetractTime());\n                today_work_time.set(today_work_time.get() + aLong);\n            });\n            Date Check_in_time = df.parse(Check_in_time_str);\n            AtomicReference<Long> expected_today_work_time = new AtomicReference<>(0L);\n            int hours = Check_in_time.getHours();\n            if (hours < 5 || hours >= 20) {\n                expected_today_work_time.set(8L);\n            } else {\n                expected_today_work_time.set(9L);\n            }\n\n            if ((today_work_time.get() / 60) > expected_today_work_time.get()) {\n                result.put(\"is_fatigue\", \"疲劳驾驶\");\n            } else {\n                result.put(\"is_fatigue\", \"没有疲劳驾驶\");\n            }\n            result.put(\"flightDate\", df.format(flightDate));\n            result.put(\"today_work_time\", (today_work_time.get() / 60));\n            result.put(\"Check_in_time\", df.format(Check_in_time));\n            result.put(\"expected_today_work_time\", expected_today_work_time);\n            resuleList.add(result);\n        });\n\n        return resuleList;\n    }\n}\n";


        String rule_02 = "import com.company.project.core.SpringContextUtils;\nimport com.company.project.model.FlightInfo;\nimport com.company.project.service.FlightInfoService\n\nimport java.text.DateFormat\nimport java.text.SimpleDateFormat;\nimport java.util.concurrent.atomic.AtomicReference\n\nimport static com.company.project.utlis.DataUtils.calcToMinute;\n\nclass Rule_01 {\n\n    private static FlightInfoService flightInfoService;\n\n    static {\n        flightInfoService = SpringContextUtils.getBean(FlightInfoService.class);\n    }\n\n    public List<Map<String, Object>> findFatiguePliot() {\n        DateFormat df = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        Map<Date, List<FlightInfo>> map = new HashMap<>();\n        List<FlightInfo> list = flightInfoService.findAll();\n        list.forEach({ flightInfo ->\n            Date flightDate = flightInfo.getFlightDate();\n            List<FlightInfo> list2 = map.get(flightDate);\n            if (list2 != null) {\n                list2.add(flightInfo);\n            } else {\n                list2 = new ArrayList<>();\n                list2.add(flightInfo);\n                map.put(flightDate, list2);\n            }\n        });\n\n        List<Map<String, Object>> resuleList = new ArrayList<>();\n        map.entrySet().forEach({ dateListEntry ->\n            Map<String, Object> result = new HashMap<>();\n            Date flightDate = dateListEntry.getKey();\n            List<FlightInfo> list2 = dateListEntry.getValue();\n            String Check_in_time_str = null;\n            AtomicReference<Long> today_work_time = new AtomicReference<>(0L);\n            list2.forEach({ flightInfo ->\n                Date checkTime = flightInfo.getCheckTime();\n                if (Check_in_time_str == null || checkTime.compareTo(df.parse(Check_in_time_str)) < 0) {\n                    Check_in_time_str = df.format(checkTime);\n                }\n                Long aLong = calcToMinute(flightInfo.getBlockTime(), flightInfo.getRetractTime());\n                today_work_time.set(today_work_time.get() + aLong);\n            });\n            Date Check_in_time = df.parse(Check_in_time_str);\n            AtomicReference<Long> expected_today_work_time = new AtomicReference<>(0L);\n            int hours = Check_in_time.getHours();\n            if (hours < 5 || hours >= 20) {\n                expected_today_work_time.set(3L);\n            } else {\n                expected_today_work_time.set(4L);\n            }\n\n            if ((today_work_time.get() / 60) > expected_today_work_time.get()) {\n                result.put(\"is_fatigue\", \"疲劳驾驶\");\n            } else {\n                result.put(\"is_fatigue\", \"没有疲劳驾驶\");\n            }\n            result.put(\"flightDate\", df.format(flightDate));\n            result.put(\"today_work_time\", (today_work_time.get() / 60));\n            result.put(\"Check_in_time\", df.format(Check_in_time));\n            result.put(\"expected_today_work_time\", expected_today_work_time);\n            resuleList.add(result);\n        });\n\n        return resuleList;\n    }\n}\n";
    }
}
